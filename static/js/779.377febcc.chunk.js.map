{"version":3,"file":"static/js/779.377febcc.chunk.js","mappings":"6PAAaA,EAAe,CAC1BC,MAAO,GACPC,SAAU,ICFCC,EACJ,CACLC,MAAO,QACPC,KAAM,QACNC,YAAa,cACbC,KAAM,QACNC,UAAU,GANDL,EAQD,CACRC,MAAO,WACPC,KAAM,WACNC,YAAa,iBACbC,KAAM,WACNC,UAAU,GCZd,EAAuB,wBAAvB,EAAqD,uB,SCuBrD,EAhBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDD,SAAAA,EACAT,aAAAA,IAFMW,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAIrBX,EAAoBS,EAApBT,SAAUD,EAAUU,EAAVV,MAElB,OACE,kBAAMa,UAAWC,EAAaN,SAAUI,EAAxC,WACE,SAACG,EAAA,GAAD,QAAWC,SAAUL,EAAcM,MAAOjB,GAAWE,KACrD,SAACa,EAAA,GAAD,QAAWC,SAAUL,EAAcM,MAAOhB,GAAaC,KACvD,mBAAQW,UAAWC,EAAYR,KAAK,SAApC,uBClBN,EAAuB,wBC+BvB,EAvBkB,WACd,IAAMY,GAAWC,EAAAA,EAAAA,MAQjB,OANgBC,EAAAA,EAAAA,MAOL,SAAC,KAAD,CAAUC,GAAG,eAIpB,2BACI,4BACI,eAAIR,UAAWC,EAAf,oBACA,SAAC,EAAD,CAAWN,SAZN,SAACc,GACdJ,GAASK,EAAAA,EAAAA,IAAMD,c,qDCdhB,I,UCAP,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAwF,yB,SCMlFP,EAAY,SAAC,GAQZ,IAPLX,EAOI,EAPJA,KACAY,EAMI,EANJA,SACAb,EAKI,EALJA,MACAc,EAII,EAJJA,MACAZ,EAGI,EAHJA,YACAE,EAEI,EAFJA,SACAD,EACI,EADJA,KAEMkB,GAAKC,EAAAA,EAAAA,UAAQ,kBFGD,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,OAGP,IEhBsBG,KAAU,IAEnC,OACE,iBAAKrB,UAAWC,EAAhB,UACGX,IAAS,mBAAOU,UAAWC,EAAcqB,QAASX,EAAzC,UAA8CrB,EAA9C,SACV,kBAAOU,UAAWC,EAChBsB,GAAIZ,EACJpB,KAAMA,EACNa,MAAOA,EACPD,SAAUA,EACVX,YAAaA,EACbE,SAAUA,EACVD,KAAMA,QAMdS,EAAUsB,aAAe,CACrB/B,KAAM,OACNC,UAAU,EACVF,YAAa,cAcjB,S,gEC1BA,IAvBgB,SAAC,GAAgD,IAA9CG,EAA6C,EAA7CA,SAAUT,EAAmC,EAAnCA,aAAmC,IAArBuC,QAAAA,OAAqB,SAC9D,GAA0BC,EAAAA,EAAAA,WAAS,UAAKxC,IAAxC,eAAOW,EAAP,KAAc8B,EAAd,KAmBA,MAAO,CAAE9B,MAAAA,EAAO8B,SAAAA,EAAU7B,aAjBL,SAAC,GAAgB,IAAd8B,EAAa,EAAbA,OACdrC,EAA+BqC,EAA/BrC,KAAMa,EAAyBwB,EAAzBxB,MAAOX,EAAkBmC,EAAlBnC,KAAMoC,EAAYD,EAAZC,QACrBC,EAAoB,aAATrC,EAAsBoC,EAAUzB,EACjDuB,GAAS,SAAAI,GAAS,yBACbA,GADa,cAEfxC,EAAOuC,QAY4B/B,aARnB,SAAAiC,GACnBA,EAAEC,iBACFtC,GAAS,UAAKE,IACV4B,GACFE,GAAS,UAAKzC","sources":["modules/LoginForm/initialState.js","modules/LoginForm/fields.js","webpack://react-homework-template/./src/modules/LoginForm/loginForm.module.css?1f30","modules/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/loginPage.module.css?3459","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/shared/components/TextField/textField.module.css?9fa7","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const initialState = {\r\n  email: '',\r\n  password: '',\r\n};\r\n","export const fields = {\r\n  email: {\r\n    label: 'Email',\r\n    name: 'email',\r\n    placeholder: 'Input email',\r\n    type: 'email',\r\n    required: true,\r\n  },\r\n  password: {\r\n    label: 'Password',\r\n    name: 'password',\r\n    placeholder: 'Input password',\r\n    type: 'password',\r\n    required: true,\r\n  },\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"loginForm_form__Q05qB\",\"btn\":\"loginForm_btn__kh3GV\"};","import useForm from 'shared/hooks/useForm';\r\n\r\nimport TextField from 'shared/components/TextField';\r\nimport { initialState } from './initialState';\r\nimport { fields } from './fields';\r\n\r\nimport styles from './loginForm.module.css'\r\n\r\nconst LoginForm = ({ onSubmit }) => {\r\n  const { state, handleChange, handleSubmit } = useForm({\r\n    onSubmit,\r\n    initialState,\r\n  });\r\n  const { password, email } = state;\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <TextField onChange={handleChange} value={email} {...fields.email} />\r\n      <TextField onChange={handleChange} value={password}{...fields.password} />\r\n      <button className={styles.btn} type=\"submit\">Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"loginPage_text__KbRva\"};","import { useDispatch} from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport { login } from \"redux/auth/authOperations\";\r\nimport useAuth from \"shared/hooks/useAuth\";\r\nimport LoginForm from \"modules/LoginForm\";\r\n\r\nimport styles from './loginPage.module.css'\r\n\r\nconst LoginPage = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const isLogin = useAuth();\r\n\r\n    const onSubmit = (data) => {\r\n        dispatch(login(data))\r\n    }\r\n\r\n    if (isLogin) {\r\n        return <Navigate to=\"/contacts\" />\r\n    }\r\n    \r\n    return (\r\n        <main>\r\n            <div>\r\n                <h2 className={styles.text}>Login</h2>\r\n                <LoginForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default LoginPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"textField_wrap__BTjE7\",\"label\":\"textField_label__1xRbX\",\"input\":\"textField_input__uEQbh\"};","import { nanoid } from 'nanoid';\r\nimport { useMemo } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './textField.module.css';\r\n\r\nconst TextField = ({\r\n  name,\r\n  onChange,\r\n  label,\r\n  value,\r\n  placeholder,\r\n  required,\r\n  type,\r\n}) => {\r\n  const id = useMemo(() => nanoid(), []);\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      {label && <label className={styles.label} htmlFor={id}>{label}: </label>}\r\n      <input className={styles.input}\r\n        ib={id}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        required={required}\r\n        type={type}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nTextField.defaultProps = {\r\n    type: \"text\",\r\n    required: false,\r\n    placeholder: \"Input data\",\r\n}\r\n\r\nTextField.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    required: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\n\r\nexport default TextField;\r\n","import { useState } from 'react';\r\n\r\nconst useForm = ({ onSubmit, initialState, isReset = true }) => {\r\n  const [state, setState] = useState({ ...initialState });\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { name, value, type, checked } = target;\r\n    const newValue = type === 'checkbox' ? checked : value;\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      [name]: newValue,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit({ ...state });\r\n    if (isReset) {\r\n      setState({ ...initialState });\r\n    }\r\n  };\r\n\r\n  return { state, setState, handleChange, handleSubmit };\r\n};\r\n\r\nexport default useForm;\r\n"],"names":["initialState","email","password","fields","label","name","placeholder","type","required","onSubmit","useForm","state","handleChange","handleSubmit","className","styles","TextField","onChange","value","dispatch","useDispatch","useAuth","to","data","login","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","ib","defaultProps","isReset","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}